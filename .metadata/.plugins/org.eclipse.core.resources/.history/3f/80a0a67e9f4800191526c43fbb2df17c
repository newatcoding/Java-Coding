package mar16e;

public class LinkedList {
	private class Node {
		public int data;
		public Node next;
	}

	private Node head;
	private Node tail;
	private int size;

	// o1
	public LinkedList() {
		head = tail = null;
		size = 0;
	}

	// on
	public void display() {
		Node temp = head;
		for (int i = 0; i < size; i++) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
		System.out.println();
	}

	// o1
	private void handleAddWhenSizeIs0(int data) {
		Node nn = new Node();

		nn.data = data;
		nn.next = null;

		head = tail = nn;
		size = 1;
	}

	// o1
	public void addLast(int data) {
		if (size == 0) {
			handleAddWhenSizeIs0(data);
		} else {
			Node nn = new Node();

			nn.data = data;
			nn.next = null;

			tail.next = nn;

			tail = nn;
			size++;
		}
	}

	// o1
	public boolean isEmpty() {
		return size == 0;
	}

	// o1
	public int getSize() {
		return size;
	}

	// o1
	public int getFirst() {
		if (size == 0) {
			return -1;
		} else {
			return head.data;
		}
	}

	// o1
	public int getLast() {
		if (size == 0) {
			return -1;
		} else {
			return tail.data;
		}
	}

	// on
	private Node getNodeAt(int idx) {
		Node temp = head;
		for (int i = 0; i < idx; i++) {
			temp = temp.next;
		}
		return temp;
	}

	// o1
	private int handleRemoveWhenSizeIs1() {
		int temp = head.data;

		head = tail = null;
		size = 0;

		return temp;
	}

	// on
	public int removeAt(int idx) {
		if (idx < 0 || idx >= size) {
			return -1;
		} else if (idx == 0) {
			return removeFirst();
		} else if (idx == size - 1) {
			return removeLast();
		} else {
			Node nm1 = getNodeAt(idx - 1);
			Node n = nm1.next;
			Node np1 = n.next;

			nm1.next = np1;
			size--;

			int temp = n.data;
			return temp;
		}
	}

	// on
	public int removeLast() {
		if (size == 1) {
			return handleRemoveWhenSizeIs1();
		} else {
			Node sl = getNodeAt(size - 2);
			sl.next = null;

			int temp = tail.data;

			tail = sl;
			size--;

			return temp;
		}
	}

	// o1
	public int removeFirst() {
		if (size == 0) {
			return -1;
		} else if (size == 1) {
			return handleRemoveWhenSizeIs1();
		} else {
			Node oh = head;

			head = head.next;
			size--;

			int temp = oh.data;
			return temp;
		}
	}
	
    public void addFirst(int data)
    {
        if(size == 0)
        {
            handleAddWhenSizeIs0(data);
        }
        else 
        {
            // space
            Node nn = new Node();

            // dandn
            nn.data = data;
            nn.next = null;

            // connect
            nn.next = head;

            //summaries
            head = nn;
            size++;
        }
    }

    // on
    public void addAt(int data, int idx)
    {
        if (idx < 0 || idx > size)
        {
            return;
        }
        else if (idx == 0)
        {
            addFirst(data);
        }
        else if (idx == size)
        {
            addLast(data);
        }
        else
        {
            Node nm1 = getNodeAt(idx - 1);
            Node np1 = nm1.next;

            Node n = new Node();
            n.data = data;

            nm1.next = n;
            n.next = np1;
            size++;
        }
    }
        
	public static void main(String[] args) {
		LinkedList l = new LinkedList();
		l.addLast(10);
		l.addLast(20);
		l.addLast(30);
		l.display(); // 10 20 30
		l.addFirst(40);
		l.addFirst(50);
		l.display(); // 50 40 10 20 30
		l.addAt(100, 3);
		l.display(); // 50 40 10 100 20 30
		l.removeFirst();
		l.removeFirst();
		l.display(); // 10 100 20 30
		l.removeLast();
		l.display(); // 10 100 20
		l.addLast(200);
		l.display(); // 10 100 20 200
		l.removeAt(2);
		l.display(); // 10 100 200

		
	}
}










